buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            // Add maven repo for SpecialSource
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

apply plugin: 'forge'
apply plugin: 'maven'
apply plugin: 'maven-publish'

ext.buildProps = file "build.properties"

buildProps.withReader {
    def prop = new Properties()
    prop.load(it)
    ext.config = new ConfigSlurper().parse prop
}

repositories {
    maven {
        name = "forge"
        url = "http://files.minecraftforge.net/maven"
    }
    ivy {
        name 'FMP'
        artifactPattern "http://files.minecraftforge.net/[module]/[module]-dev-[revision].[ext]"
    }
}

group = "jakimbox"
archivesBaseName = "JakimBox"

minecraft {
    version = "${config.version.forge}-${config.version.minecraft}"

    replace "@MAJOR@", config.version.mod.major
    replace "@MINOR@", config.version.mod.minor

    if (System.getenv("BUILD_NUMBER") != null) {
        replace "@BUILD@", System.getenv("BUILD_NUMBER")
    }
    else
    {
        replace "@BUILD@", "ManuallyBuilt"
    }
}

processResources {
    from 'build.properties'
}

allprojects {
    version = "${config.version.minecraft}-${config.version.mod.major}.${config.version.mod.minor}"

    if (System.getenv("BUILD_NUMBER") != null) {
        version += ".${System.getenv("BUILD_NUMBER")}"
    } else {
        version += "-ManuallyBuilt"
    }

    jar {
        destinationDir = file (rootProject.getRootDir().getPath() + '/output')
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifact jar
            }
        }
        repositories {
            maven {
                url "file://var/www/maven"
            }
        }
    }
}


sourceSets {
    main {
        resources {
            exclude '**/xcf/*'
        }
    }
}

task deobfJar(type: Jar) { // Generate deobfuscated
    from sourceSets.main.output
    classifier = 'deobf'
    destinationDir = file (rootProject.getRootDir().getPath() + '/output')
}
task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
    destinationDir = file (rootProject.getRootDir().getPath() + '/output')
}

tasks.assemble.dependsOn('sourceJar', 'deobfJar')
